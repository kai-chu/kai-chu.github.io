Module
A module is a file containing Python definitions and statements. 
The file name is the module name with the suffix .py appended. 
A file containing Python code, for example: example.py, is called a module, and its module name would be example.
Within a module, the moduleâ€™s name (as a string) is available as the value of the global variable __name__.

Import a module
1. Import and import with rename
import module as shortmodulename
import module 

module.actualModule
shortmodulename.actualModule

2. Import a function
from module import actualModule
from module import actualModule1, actualModule2

actualModule

3. Import all functions
from module import *

Executing modules as scripts
python fibo.py <arguments>, will execute the module but with global variable __name__ set to "__main__"
If you want to make you python file both executable and importable, you can use this way
if __name__ == "__main__":
    import sys
    fib(int(sys.argv[1]))
 
Module Search path
While importing a module, Python looks at several places. 
Interpreter first looks for a built-in module. Then(if built-in module not found), Python looks into a list of directories defined in sys.path
1. current folder
2. PYTHONPATH 
3. The installation-dependent default(e.g. C:\\Python33\\lib\\site-packages)
NOTE: Directory containing the symlink is not added to the module search path.

__pycache__ directory 
To speed up loading modules, Python caches the compiled version of each module in the __pycache__ directory under the name module.version.pyc,
where the version encodes the format of the compiled file; it generally contains the Python version number

Module in advance
Dictionary __dict__ is maintained by a module to manage its properties and members.
a.__dict__['a'] = a is equivlent to a.a = a
