
4. Basic usage
airflow@7feed34ba9f5:~/dags$ airflow list_dags
[2020-02-28 10:45:59,134] {{__init__.py:51}} INFO - Using executor SequentialExecutor
[2020-02-28 10:45:59,135] {{dagbag.py:403}} INFO - Filling up the DagBag from /usr/local/airflow/dags
-------------------------------------------------------------------
DAGS
-------------------------------------------------------------------
....
sa
....

airflow@7feed34ba9f5:~/dags$ airflow trigger_dag sa
[2020-02-28 10:47:19,379] {{__init__.py:51}} INFO - Using executor SequentialExecutor
[2020-02-28 10:47:19,380] {{dagbag.py:403}} INFO - Filling up the DagBag from /usr/local/airflow/dags/sa.py
Created <DagRun sa @ 2020-02-28 10:47:19+00:00: manual__2020-02-28T10:47:19+00:00, externally triggered: True>

airflow@7feed34ba9f5:~/dags$ airflow list_dag_runs sa
[2020-02-28 10:54:20,568] {{__init__.py:51}} INFO - Using executor SequentialExecutor
[2020-02-28 10:54:20,569] {{dagbag.py:403}} INFO - Filling up the DagBag from /usr/local/airflow/dags


------------------------------------------------------------------------------------------------------------------------
DAG RUNS
------------------------------------------------------------------------------------------------------------------------
id  | run_id               | state      | execution_date       | state_date           |

12  | manual__2020-02-28T10:52:11.301141+00:00 | running    | 2020-02-28T10:52:11.301141+00:00 | 2020-02-28T10:52:11.320291+00:00 |
11  | manual__2020-02-28T10:47:19+00:00 | running    | 2020-02-28T10:47:19+00:00 | 2020-02-28T10:47:19.397062+00:00 |


5. References

https://airflow.apache.org/docs/stable/cli.html
usage: airflow [-h]
               {backfill,list_dag_runs,list_tasks,clear,pause,unpause,trigger_dag,delete_dag,show_dag,pool,variables,kerberos,render,run,initdb,list_dags,dag_state,task_failed_deps,task_state,serve_logs,test,webserver,resetdb,upgradedb,checkdb,shell,scheduler,worker,flower,version,connections,create_user,delete_user,list_users,sync_perm,next_execution,rotate_fernet_key}
               ...

positional arguments:
  {backfill,list_dag_runs,list_tasks,clear,pause,unpause,trigger_dag,delete_dag,show_dag,pool,variables,kerberos,render,run,initdb,list_dags,dag_state,task_failed_deps,task_state,serve_logs,test,webserver,resetdb,upgradedb,checkdb,shell,scheduler,worker,flower,version,connections,create_user,delete_user,list_users,sync_perm,next_execution,rotate_fernet_key}
                        sub-command help
    backfill            Run subsections of a DAG for a specified date range.
                        If reset_dag_run option is used, backfill will first
                        prompt users whether airflow should clear all the
                        previous dag_run and task_instances within the
                        backfill date range. If rerun_failed_tasks is used,
                        backfill will auto re-run the previous failed task
                        instances within the backfill date range.
    list_dag_runs       List dag runs given a DAG id. If state option is
                        given, it will onlysearch for all the dagruns with the
                        given state. If no_backfill option is given, it will
                        filter outall backfill dagruns for given dag id.
  
    clear               Clear a set of task instance, as if they never ran
    pause               Pause a DAG
    unpause             Resume a paused DAG
    trigger_dag         Trigger a DAG run
    delete_dag          Delete all DB records related to the specified DAG
    show_dag            Displays DAG's tasks with their dependencies
    pool                CRUD operations on pools
    variables           CRUD operations on variables
    kerberos            Start a kerberos ticket renewer
    render              Render a task instance's template(s)
    run                 Run a single task instance
    initdb              Initialize the metadata database
    list_dags           List all the DAGs
    ```
    airflow list_dags
    
    ```
    list_tasks          List the tasks within a DAG
    ```
    airflow list_tasks dag_id
    ```
    
    task_state          Get the status of a task instance
    ```
    $ airflow task_state dag_id task_id 2020-08-05
    [2020-08-05 10:50:40,438] {__init__.py:51} INFO - Using executor CeleryExecutor
    [2020-08-05 10:50:40,439] {dagbag.py:396} INFO - Filling up the DagBag from /usr/share/airflow/dags
    success
    ```
    
    dag_state           Get the status of a dag run
    ```
    $ airflow dag_state shb-ls-hh 2020-08-05
    [2020-08-05 10:50:10,098] {__init__.py:51} INFO - Using executor CeleryExecutor
    [2020-08-05 10:50:10,099] {dagbag.py:396} INFO - Filling up the DagBag from /usr/share/airflow/dags
    success
    ```
    
    task_failed_deps    Returns the unmet dependencies for a task instance
                        from the perspective of the scheduler. In other words,
                        why a task instance doesn't get scheduled and then
                        queued by the scheduler, and then run by an executor).
    serve_logs          Serve logs generate by worker
    test                Test a task instance. This will run a task without
                        checking for dependencies or recording its state in
                        the database.
    webserver           Start a Airflow webserver instance
    resetdb             Burn down and rebuild the metadata database
    upgradedb           Upgrade the metadata database to latest version
    checkdb             Check if the database can be reached.
    shell               Runs a shell to access the database
    scheduler           Start a scheduler instance
    worker              Start a Celery worker node
    flower              Start a Celery Flower
    version             Show the version
    connections         List/Add/Delete connections
    create_user         Create an account for the Web UI (FAB-based)
    delete_user         Delete an account for the Web UI
    list_users          List accounts for the Web UI
    sync_perm           Update permissions for existing roles and DAGs.
    next_execution      Get the next execution datetime of a DAG.
    rotate_fernet_key   Rotate all encrypted connection credentials and
                        variables; see
                        https://airflow.readthedocs.io/en/stable/howto/secure-
                        connections.html#rotating-encryption-keys.

optional arguments:
  -h, --help            show this help message and exit


Connection
create by UI or Envrionment
https://airflow.apache.org/docs/stable/howto/connection/index.html#connection-types
ENV
AIRFLOW_CONN_${ConnectionID}=connection str
e.g.
postgres://user:password@localhost:5432/master

connection to hdfs namenode 

