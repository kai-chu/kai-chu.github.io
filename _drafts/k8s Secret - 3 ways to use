# 3 ways to use secrets

let's assume secret named my secret as following 
```
apiVersion: v1
kind: Secret
metadata:
  name: mysecret
type: Opaque
stringData:
  username: admin
  password: 1f2d1e2e67df
```

1. Used as environments
1.1 Use user defined name
```
apiVersion: v1
kind: Pod
metadata:
  name: secret-env-pod
spec:
- containers
  - name: container-name
    env:
    - name: PGDATA
      value: /var/lib/postgresql/data/pgdata
    - name: POSTGRES_USER
      valueFrom:
        secretKeyRef:
          name: mysecret
          key: username
```

The environment variable POSTGRES_USER shall be the value `admin`

1.2 Use keys from secret directly as env, key word `envFrom`
```
apiVersion: v1
kind: Pod
metadata:
  name: secret-env-pod
spec:
- containers
  - name: container-name
    env:
    - name: PGDATA
      value: /var/lib/postgresql/data/pgdata
    envFrom:
    - secretRef:
        name: test-secret
```
The environment variable username and password shall exist now.

2. Used as volume files
* Create a volume from a secret
```
volumes:
- name: volume-from-secret
  secret:
    secretName: mysecret
```

* Mount the volume to a directory
```
volumeMounts:
- name: volume-from-secret
  mountPath: "/etc/foo"
  readOnly: true
```

Put them together in a yaml file
```
apiVersion: v1
kind: Pod
metadata:
  name: mypod
spec:
  containers:
  - name: mypod
    image: redis
    volumeMounts:
    - name: foo
      mountPath: "/etc/foo"
      readOnly: true
  volumes:
  - name: foo
    secret:
      secretName: mysecret
```
You can use the values from the files created from the secret keys
```
$cat /etc/foo/username 
admin
$cat /etc/foo/password 
1f2d1e2e67df
```

2.1 To select a specific key instead of mount all keys into the folder, we can add `items` when creating the volume
```
apiVersion: v1
kind: Pod
metadata:
  name: mypod
spec:
  containers:
  - name: mypod
    image: redis
    volumeMounts:
    - name: foo
      mountPath: "/etc/foo"
      readOnly: true
  volumes:
  - name: foo
    secret:
      secretName: mysecret
      
      
      items:
      - key: username
        path: my-group/my-username
```
Now you will find username and not password is projected under path `/etc/foo/password`
```
$cat /etc/foo/my-group/my-username
admin
```

2.2 File mode 
0644 is used by default, which can be changed as following
```
volumes:
- name: foo
  secret:
    secretName: mysecret
    defaultMode: 0400
```


https://kubernetes.io/docs/concepts/configuration/secret/#using-secrets-as-files-from-a-pod


3. Kubelet auth to pull image
3.1 Use image pull secret in pod spec
When k8s is trying to pull image from image registry, it will check list of secrets in `the same namespace` in the field `imagePullSecrets` from your specification. 
* To create a secret for docker authentication 
```
kubectl create secret docker-registry myregistrykey --docker-server=DOCKER_REGISTRY_SERVER --docker-username=DOCKER_USER --docker-password=DOCKER_PASSWORD --docker-email=DOCKER_EMAIL
```
* Refer the secret in the pod spec
```
apiVersion: v1
kind: Pod
metadata:
  name: foo
  namespace: awesomeapps
spec:
  containers:
    - name: foo
      image: YOUR_PRIVATE_DOCKER_IMAGE
  imagePullSecrets:
    - name: myregistrykey
```

3.2 Use image pull secret in pod service account
Since each pod will be associated with an service account, we can also add the `imagePullSecrets` to the service account 
Usually if we don't specify service account, the default one is used for a pod. 
3.2.1 Patch an existing service account
We can patch the service account as following
```
kubectl patch serviceaccount default -p '{"imagePullSecrets": [{"name": "myregistrykey"}]}'
```

3.2.2 Create a new one service account
* Add a service account with imagePullSecrets
```
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-pod-used-service-account
  namespace: default
...
imagePullSecrets:
- name: myregistrykey
```
* Config a pod to use the service account
```
apiVersion: v1
kind: Pod
metadata:
  name: foo
  namespace: awesomeapps
spec:
  containers:
    - name: foo
      image: YOUR_PRIVATE_DOCKER_IMAGE
  serviceAccountName: build-robot
```

When pod is created with my-pod-used-service-account, the imagePullSecrets will be added automatically in the spec, we can verify 
```
kubectl get pod THE_POD_NAME -o=jsonpath='{.spec.imagePullSecrets[0].name}{"\n"}'
```
